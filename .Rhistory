f(4)
f(x) = 2x+4
f <- function(x){
2x+4
}
g <- function(x) {
if (x < 0){
return("Negative number")
} if (x > 0) {
return ("Positive Number")
} else {
return ("You typed 0")
}
}
g <- function(x) {
if (x < 0){
return("Negative number")
} if (x > 0) {
return ("Positive Number")
} else {
return ("You typed 0")
}
}
g <- function(x) {
if (x < 0) {
return("Negative number")
} if (x > 0) {
return ("Positive Number")
} else {
return ("You typed 0")
}
}
g <- function(x) {
if (x < 0) {
return("Negative number")
} if (x > 0) {
return ("Positive Number")
} else {
return ("You typed 0")
}
}
g <- function(x) {
if (x < 0) {
return("Negative number")
} else if (x > 0) {
return ("Positive Number")
} else {
return ("You typed 0")
}
}
g(4)
g(4)
g(0)
g(-9)
f <- function(x){
x = 2x+4
}
Num_Convert=c(1,2,3,4)
choice = 'First'
switch(choice, First=Num_Convert[Num_Convert=1],
Second=Num_Convert[Num_Convert=2],
Third=Num_Convert[Num_Convert=3],
Forth=Num_Convert[Num_Convert4],
Null=Num_Convert[Num_Convert>4])
1
fun <- function(Num_Convert) {
switch(choice,
First={Num_Convert=1
},
Second={Num_Convert=2
},
Third={Num_Convert=3
},
Forth={Num_Convert4
},
Null=Num_Convert>4)
}
fun(1)
fun(2)
fun(3)
fun(4)
fun(5)
fun(10)
fun(1)
g(4)
g(0)
g(-9)
generate_email <- function(name) {
name="John Andrew Thomas"
name1=strsplit(name, split=' ')
name2=unlist(name1)
generate_email=paste(name2, c('gmail.com'), sep='@', collapse=';')
}
generate_email <- function(name) {
name1=strsplit(name, split=' ')
name2=unlist(name1)
generate_email=paste(name2, c('gmail.com'), sep='@', collapse=';')
}
name="John Andrew Thomas"
generate_email <- function(name) {
name1=strsplit(name, split=' ')
name2=unlist(name1)
generate_email=paste(name2, c('gmail.com'), sep='@', collapse=';')
}
generate_email("John Andrew Thomas")
source('C:/Users/rajes/Desktop/NYDS/Data Analysis & Visualization with R/R Folder/Test.R')
getwd()
source('C:/Users/rajes/Desktop/NYDS/Data Analysis & Visualization with R/ggplot2/ggplot.R')
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
?mpg
?iris
head(mpg)
mpg
view(mpg)
View(mpg)
g <- ggplot(data = mpg, aes(x = displ, y = hwy))
g
g + geom_point()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point(x = year, y = city)
g + geom_point(aes(x = year, y = city))
g + geom_point(aes(x = year, y = city))
g + geom_point(aes(x = year, y = cty))
g + geom_point() + geom_smooth(method = "lm")
View(mpg)
View(cars)
data(cars)
p_scatterplot = ggplot(data = cars, aes(x = speed, y = dist))
p_scatterplot + geom_point()
p_scatterplot = ggplot(data = cars, aes(y = dist, x = speed))
p_scatterplot + geom_point()
p_scatterplot = ggplot(data = cars, aes(x = speed, y = dist))
p_scatterplot + geom_point()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point(aes(color = class))
g + geom_point(aes(shape = class))
g + geom_point(aes(size = class))
g + geom_point(aes(alpha == class))
g + geom_point(aes(alpha = class))
g + geom_point()
g + geom_point() + facet_grid(. ~ cyl)
g + geom_point() + facet_grid(drv ~ .)
g + geom_point() + facet_grid(drv ~ cyl)
g + geom_point() + facet_wrap(drv ~ cyl)
g + geom_point() + facet_wrap( ~ class)
?reorder
p_scatterplot = ggplot(data = cars, aes(x = dist, y = speed))
p_scatterplot = ggplot(data = cars, aes(x = speed, y = dist))
p_scatterplot + geom_point()
p_scatterplot
ggplot(data = cars, aes(x = speed, y = dist)) + geom_point() + labs(x = "Speed (mph)", y = "Stopping Distance (ft))
exit
p
""
:q
""
p = ggplot(data = cars, aes(x = speed, y = dist))
+ geom_point()
+ labs(x = "Speed (mph)", y = "Stopping Distance (ft)")
p = ggplot(data = cars, aes(x = speed, y = dist)) +
geom_point() +
labs(x = "Speed (mph)", y = "Stopping Distance (ft)")
p
p = ggplot(data = cars, aes(x = speed, y = dist)) +
geom_point() +
labs(x = "Speed (mph)", y = "Stopping Distance (ft)")
p = ggplot(data = cars, aes(x = speed, y = dist)) +
geom_point() +
labs(x = "Speed (mph)", y = "Stopping Distance (ft)") +
labs(title = "Scatterplot of Speed/Distance")
p
p = ggplot(data = cars, aes(x = dist, y =speed) +
geom_point(shape = 17, fill = "red")
p
p = ggplot(data = cars, aes(x = dist, y =speed) +
geom_point(col="red", pch=17)
""
p = ggplot(data = cars, aes(x = dist, y =speed) +
geom_point(col="red", pch=17))
p = ggplot(data = cars, aes(x = dist, y =speed)) +
geom_point(col="red", pch=17)
p
p = ggplot(data = cars, aes(x = dist, y =speed)) +
geom_point(col="red", pch=17)
g + geom_point(aes(color = class))
p = ggplot(data = cars, aes(x = dist, y =speed)) +
geom_point(col="red", pch=17)
p
g + geom_point(aes(color = class))
getwd()
load("C:/Users/rajes/Desktop/NYDS/Data Analysis & Visualization with R/R Folder/.RData")
load("C:/Users/rajes/Desktop/NYDS/Data Analysis & Visualization with R/R Folder/.RData")
load("C:/Users/rajes/Desktop/NYDS/Data Analysis & Visualization with R/Shiny/My_App/.RData")
print("Hello World!")
source('~/.active-rstudio-document')
debugSource('C:/Users/rajes/Desktop/NYDS/NYDS-2/RDA/Class.R')
a = 1
print("Hello World!")
source('C:/Users/rajes/Desktop/NYDS/NYDS-2/RDA/Class.R')
source('C:/Users/rajes/Desktop/NYDS/NYDS-2/RDA/Class.R')
mysum = function(a,b){return(a+b)}
mysum(1,2)
source('C:/Users/rajes/Desktop/NYDS/NYDS-2/RDA/Class.R')
install.packages("ggplot2")
setwd("~/Desktop/anythingFolder")
getwd()
texas = read.csv("texas.csv")
texas = read.csv("texas.csv")
texas = read.csv('texas.csv')
texas = read.csv('C:/Users/rajes/Desktop/NYDS/NYDS-2/RDA/Data Visualization with ggplot2/texas.csv')
g = ggplot(data = texas, aes(x = long, y = lat))
library(ggplot2)
g = ggplot(data = texas, aes(x = long, y = lat))
g + geom_polygon(aes(group = group))
g + geom_polygon(aes(group = group), fill = group)
g + geom_polygon(aes(group = group, fill = group))
tx <- g + geom_polygon(aes(group = group, fill = bin))
tx + ggtitle("Population of Texas Counties")
tx + scale_fill_brewer(palette = "Spectral")
install.packages("ggthemes")
p
p <- ggplot(data = diamonds, aes(x = color)) +
geom_bar(aes(fill = cut))
p
p + theme_economist()
p
p + theme_economist() + scale_fill_economist()
p
tx
tx2 = tx + ggtitle("Population of Texas")
tx
tx2 = tx + ggtitle("Population of Texas")
install.packages('addinslist')
library(addinslist)
addinslist:::addinslistAddin()
addinslist:::addinslistAddin()
shiny::runApp('C:/Users/rajes/Desktop/NYDS/NYDS-2/RDA/Shiny_Proj/heart_health')
runApp('C:/Users/rajes/Desktop/NYDS/NYDS-2/RDA/Shiny_Proj/heart_health')
runApp('C:/Users/rajes/Desktop/NYDS/NYDS-2/RDA/Shiny_Proj/heart_health')
shiny::runApp('C:/Users/rajes/Desktop/NYDS/Data Analysis & Visualization with R/Shiny/Happy Countries')
runApp('C:/Users/rajes/Desktop/NYDS/Data Analysis & Visualization with R/Shiny/Happy Countries')
runApp('C:/Users/rajes/Desktop/NYDS/Data Analysis & Visualization with R/Shiny/Happy Countries')
getwd()
setwd("C:/Users/rajes/Desktop/NYDS/Data Analysis & Visualization with R/Shiny/Happy Countries/")
Rankchange2$Country <- factor(Rankchange2$Country, levels = Rankchange2$Country[order(Rankchange2$`Rank Change 2016-2017`)])
Rankchange4$Country <- factor(Rankchange4$Country, levels = Rankchange4$Country[order(Rankchange4$`Rank Change 2016-2017`)])
datatable(data=Happiness, rownames=FALSE)
library(dplyr)
library(ggplot2)
library(shiny)
library(ggthemes)
library(DT)
library(rsconnect)
Rank15 <- read.csv("2015.csv")
Rank16 <- read.csv("2016.csv")
Rank17 <- read.csv("2017.csv")
Rank152 <- mutate(Rank15, Year = 2015)
colnames(Rank152) <- c("Country", "Region", "Rank", "Score","Standard.Error","Economy","Family","Life","Freedom","Trust","Generosity","Dystopia", "Year")
Rank162 <- mutate(Rank16, Year = 2016)
colnames(Rank162) <- c("Country", "Region", "Rank", "Score","Confidence1","Confidence2", "Economy", "Family", "Life", "Freedom", "Trust", "Generosity", "Dystopia", "Year")
Rank172 <- mutate(Rank17, Year = 2017)
colnames(Rank172) <- c("Country", "Rank", "Score","Confidence1","Confidence2", "Economy", "Family", "Life", "Freedom", "Generosity","Trust", "Dystopia", "Year")
df153 <- rbind(Rank152[,c(1,3,4,6:11,13)], Rank162[,c(1,3,4,7:12,14)])
df154 <- rbind(df153[,], Rank172[,c(1:3,6:11,13)])
df154$Continent <- NA
df154$Continent[which(df154$Country %in% c("Israel", "United Arab Emirates", "Singapore", "Thailand", "Taiwan Province of China",
"Qatar", "Saudi Arabia", "Kuwait", "Bahrain", "Malaysia", "Uzbekistan", "Japan",
"South Korea", "Turkmenistan", "Kazakhstan", "Turkey", "Hong Kong S.A.R., China", "Philippines",
"Jordan", "China", "Pakistan", "Indonesia", "Azerbaijan", "Lebanon", "Vietnam",
"Tajikistan", "Bhutan", "Kyrgyzstan", "Nepal", "Mongolia", "Palestinian Territories",
"Iran", "Bangladesh", "Myanmar", "Iraq", "Sri Lanka", "Armenia", "India", "Georgia",
"Cambodia", "Afghanistan", "Yemen", "Syria"))] <- "Asia"
df154$Continent[which(df154$Country %in% c("Norway", "Denmark", "Iceland", "Switzerland", "Finland",
"Netherlands", "Sweden", "Austria", "Ireland", "Germany",
"Belgium", "Luxembourg", "United Kingdom", "Czech Republic",
"Malta", "France", "Spain", "Slovakia", "Poland", "Italy",
"Russia", "Lithuania", "Latvia", "Moldova", "Romania",
"Slovenia", "North Cyprus", "Cyprus", "Estonia", "Belarus","Serbia", "Hungary", "Croatia", "Kosovo", "Montenegro",
"Greece", "Portugal", "Bosnia and Herzegovina", "Macedonia",
"Bulgaria", "Albania", "Ukraine"))] <- "Europe"
df154$Continent[which(df154$Country %in% c("Canada", "Costa Rica", "United States", "Mexico",
"Panama","Trinidad and Tobago", "El Salvador", "Belize", "Guatemala",
"Jamaica", "Nicaragua", "Dominican Republic", "Honduras",
"Haiti"))] <- "North America"
df154$Continent[which(df154$Country %in% c("Chile", "Brazil", "Argentina", "Uruguay",
"Colombia", "Ecuador", "Bolivia", "Peru",
"Paraguay", "Venezuela"))] <- "South America"
df154$Continent[which(df154$Country %in% c("New Zealand", "Australia"))] <- "Australia"
df154$Continent[which(is.na(df154$Continent))] <- "Africa"
Happiness2 <- df154 %>% select(Country,Continent, everything())
df1 <- merge(Rank15[,c(1,3,4)], Rank16[,c(1,3,4)], by.x = "Country", by.y = "Country")
colnames(df1) <- c("Country", "Rank2015", "Happiness.Score2015", "Rank2016","Happiness.Score2016")
Happiness <- merge(df1[,], Rank17[,c(1,2,3)])
colnames(Happiness) <- c("Country", "Rank2015", "Happiness.Score2015", "Rank2016","Happiness.Score2016", "Rank2017", "Happiness.Score2017")
Happiness <- Happiness %>%   mutate(`Rank Change 2015-2016`=`Rank2015`-`Rank2016`, `Rank Change 2016-2017`=`Rank2016`-`Rank2017`)
#Top10 Countries with increase in Happiness
Rankchange3 <- head(arrange(Happiness, desc(`Rank Change 2015-2016`)), 10)
Rankchange4 <- head(arrange(Happiness, desc(`Rank Change 2016-2017`)), 10)
shinyServer(function(input, output) {
#Ranking Page
#=====================================================================================================================
Happiness_reactive <- reactive({
#Happiness2[Happiness2$Year==input$Year,]
Happiness2 %>%
filter(Year == input$Year) %>%
arrange(Rank)
# head(20)
})
output$Ranking = renderPlot({
Happiness3 = Happiness_reactive()
Happiness3$Country <- factor(Happiness3$Country, levels = Happiness3$Country[order(Happiness3$Rank)])
ggplot(data = head(Happiness3, 20), aes(x= Country, y= Rank)) +
geom_segment(aes(x= Country, xend = Country, y = 0, yend = Rank), color = "red") +
geom_point(size=5, color="red", fill=alpha("orange", 0.3), alpha=0.7, shape=21) +
theme_light() +
theme(panel.grid.major.x = element_blank(),panel.border = element_blank(),axis.ticks.x = element_blank()) +
ggtitle("Happy Countries")
})
#Factors contributing to Happiness
#============================================================================================================
#Economy
#=========
output$Economy = renderPlot({
Happiness4 <- Happiness2[Happiness2$Continent==input$Continent2,]
ggplot(data = Happiness4, aes(x= Economy, y= Score)) +
geom_point(aes(color=Continent), size = 3, alpha = 0.8) +
geom_smooth(aes(color = Continent, fill = Continent), method = "lm", fullrange = TRUE) +
facet_wrap(~Year) +
theme_bw() + labs(title = "Economy role in Happiness")
})
#Family
#=========
output$Family = renderPlot({
Happiness5 <- Happiness2[Happiness2$Continent==input$Continent3,]
ggplot(data = Happiness5, aes(x= Family, y= Score)) +
geom_point(aes(color=Continent), size = 3, alpha = 0.8) +
geom_smooth(aes(color = Continent, fill = Continent), method = "lm", fullrange = TRUE) +
facet_wrap(~Year) +
theme_bw() + labs(title = "Family role in Happiness")
})
#Life Expectency
#=================
output$Life = renderPlot({
Happiness4 <- Happiness2[Happiness2$Continent==input$Continent4,]
ggplot(data = Happiness4, aes(x= Life, y= Score)) +
geom_point(aes(color=Continent), size = 3, alpha = 0.8) +
geom_smooth(aes(color = Continent, fill = Continent), method = "lm", fullrange = TRUE) +
facet_wrap(~Year) +
theme_bw() + labs(title = "Life expectency role in Happiness")
})
#Freedom
#========
output$Freedom = renderPlot({
Happiness4 <- Happiness2[Happiness2$Continent==input$Continent5,]
ggplot(data = Happiness4, aes(x= Freedom, y= Score)) +
geom_point(aes(color=Continent), size = 3, alpha = 0.8) +
geom_smooth(aes(color = Continent, fill = Continent), method = "lm", fullrange = TRUE) +
facet_wrap(~Year) +
theme_bw() + labs(title = "Freedom role in Happiness")
})
#Trust
#===========
output$Trust = renderPlot({
Happiness4 <- Happiness2[Happiness2$Continent==input$Continent6,]
ggplot(data = Happiness4, aes(x= Trust, y= Score)) +
geom_point(aes(color=Continent), size = 3, alpha = 0.8) +
geom_smooth(aes(color = Continent, fill = Continent), method = "lm", fullrange = TRUE) +
facet_wrap(~Year) +
theme_bw() + labs(title = "Corruption role in Happiness")
})
#Generosity
#===========
output$Generosity = renderPlot({
Happiness4 <- Happiness2[Happiness2$Continent==input$Continent7,]
ggplot(data = Happiness4, aes(x= Generosity, y= Score)) +
geom_point(aes(color=Continent), size = 3, alpha = 0.8) +
geom_smooth(aes(color = Continent, fill = Continent), method = "lm", fullrange = TRUE) +
facet_wrap(~Year) +
theme_bw() + labs(title = "Role of Generosity in Happiness")
})
##Significant Rank Changes
#==========================================================================================
#Top10 Countries with increase in Happiness
output$change1 = renderPlot({
Rankchange3$Country <- factor(Rankchange3$Country, levels = Rankchange3$Country[order(Rankchange3$`Rank Change 2015-2016`)])
ggplot(data=Rankchange3, aes(x=Country, y=`Rank Change 2015-2016`)) +
geom_bar(aes(fill=Country),stat = "identity") + theme_bw() +
ggtitle("Significant increase in Rank: 2015-2016")
})
output$change2 = renderPlot({
Rankchange4$Country <- factor(Rankchange4$Country, levels = Rankchange4$Country[order(Rankchange4$`Rank Change 2016-2017`)])
ggplot(data=Rankchange4, aes(x=Country, y=`Rank Change 2016-2017`)) +
geom_bar(aes(fill=Country),stat = "identity") + theme_bw() +
ggtitle("Significant increase in Rank: 2016-2017")
})
output$change3 = renderPlot({
Rankchange1$Country <- factor(Rankchange1$Country, levels = Rankchange1$Country[order(Rankchange1$`Rank Change 2015-2016`)])
ggplot(data=Rankchange1, aes(x= Country, y= -(`Rank Change 2015-2016`))) +
geom_bar(aes(fill=Country), stat = "identity") + theme_bw() +
ggtitle("Significant decrease in Rank: 2015-2016")
})
output$change4 = renderPlot({
Rankchange2$Country <- factor(Rankchange2$Country, levels = Rankchange2$Country[order(Rankchange2$`Rank Change 2016-2017`)])
ggplot(data=Rankchange2, aes(x=Country,y= -(`Rank Change 2016-2017`))) +
geom_bar(aes(fill=Country),stat = "identity") + theme_bw() +
ggtitle("Significant decrease in Rank: 2016-2017")
})
##Data Table
#==========================================================================================
output$table1 <- DT::renderDataTable({
datatable(data=Happiness2, rownames=FALSE)
})
output$table2 <- DT::renderDataTable({
datatable(data=Happiness, rownames=FALSE)
})
})
Rankchange2$Country <- factor(Rankchange2$Country, levels = Rankchange2$Country[order(Rankchange2$`Rank Change 2016-2017`)])
Rankchange4$Country <- factor(Rankchange4$Country, levels = Rankchange4$Country[order(Rankchange4$`Rank Change 2016-2017`)])
Rankchange1$Country <- factor(Rankchange1$Country, levels = Rankchange1$Country[order(Rankchange1$`Rank Change 2015-2016`)])
Rankchange3$Country <- factor(Rankchange3$Country, levels = Rankchange3$Country[order(Rankchange3$`Rank Change 2015-2016`)])
Rankchange4$Country <- factor(Rankchange4$Country, levels = Rankchange4$Country[order(Rankchange4$`Rank Change 2016-2017`)])
Rankchange1$Country <- factor(Rankchange1$Country, levels = Rankchange1$Country[order(Rankchange1$`Rank Change 2015-2016`)])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/rajes/Desktop/NYDS/NYDS-2/RDA/Shiny_Proj/heart_health')
cor(df1)
getwd()
setwd("C:/Users/rajes/Desktop/NYDS/NYDS-2/RDA/Shiny_Proj/")
##Loading & Cleaning data
#setwd("C:/Users/rajes/Desktop/NYDS/NYDS-2/RDA/Shiny_Proj/")
df1 <- read.csv(file = "heart.csv", header = TRUE, sep = ",", fileEncoding="UTF-8-BOM")
cor(df1)
corrplot(df1cor, method = "pie", type = "lower")
df1cor<- cor(df1) #the correlation graph is saved to 'heartcor'
Plotcorl <- corrplot(df1cor, method = "pie", type = "lower")
#Conversion to categorical variables
#df2 = rbind(df1)
df1$sex = as.character(df1$sex)
df1$fbs = as.character(df1$fbs)
df1$restecg = as.character(df1$restecg)
df1$exang = as.character(df1$exang)
df1$slope = as.character(df1$slope)
df1$ca = as.character(df1$ca)
df1$thal = as.character(df1$thal)
df1$target = as.character(df1$target)
#Renaming categorical values to respective values
df1$sex[df1$sex == "0"] <- "Female"
df1$sex[df1$sex == "1"] <- "Male"
df1$cp[df1$cp == "0"] <- "Typical Angina"
df1$cp[df1$cp == "1"] <- "Atypical Angina"
df1$cp[df1$cp == "2"] <- "Non-Anginal Pain"
df1$cp[df1$cp == "3"] <- "Asymptomatic"
df1$fbs[df1$fbs == "1"] <- "True"
df1$fbs[df1$fbs == "0"] <- "False"
df1$exang[df1$exang == "0"] <- "No"
df1$exang[df1$exang =="1"] <- "Yes"
df1$slope[df1$slope == "0"] <- "Upsloping"
df1$slope[df1$slope == "1"] <- "Flat"
df1$slope[df1$slope == "2"] <- "Downsloping"
df1cor<- cor(df1)
##Loading required libraries for EDA
library(tidyverse) #contains many useful packages such as dplyr and ggplot
library(ggthemes) #to create  plot themes
library(scales) # scale_y_continuous(label = percent)
library(corrplot) # Corelation Plots
##Loading & Cleaning data
setwd("C:/Users/rajes/Desktop/NYDS/NYDS-2/RDA/Shiny_Proj/")
df1 <- read.csv(file = "./data/heart.csv", header = TRUE, sep = ",", fileEncoding="UTF-8-BOM")
class(df1)
str(df1) #Found some columns in numeric which are supposed to be categorical variables
df1cor<- cor(df1) #the correlation graph is saved to 'heartcor'
Plot2 <- corrplot(df1cor, method = "pie", type = "lower")
#Conversion to categorical variables
df2 = cbind(df1)
df2 = cbind(df1)
df2$sex = as.character(df1$sex)
df2$fbs = as.character(df1$fbs)
df2$restecg = as.character(df1$restecg)
df2$exang = as.character(df1$exang)
df2$slope = as.character(df1$slope)
df2$ca = as.character(df1$ca)
df2$thal = as.character(df1$thal)
df2$target = as.character(df1$target)
Plot1 <- ggplot(df2, aes(x = as.factor(target), fill=as.factor(target))) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
scale_y_continuous(labels = percent) +
theme_economist()+
scale_fill_economist()+
guides(fill=F) +
labs(x="Target", y="Percent")
Plot1
Plot2 <- corrplot(df1cor, method = "pie", type = "lower")
runApp('heart_health')
